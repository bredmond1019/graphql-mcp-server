# Code Examples Configuration for Healthie MCP Server
# This file contains code examples for different programming languages

javascript:
  name: "JavaScript/TypeScript"
  description: "Modern JavaScript with async/await and TypeScript support"
  dependencies:
    - "@apollo/client"
    - "graphql"
    - "node-fetch"
  
  examples:
    - operation: "Create Patient"
      code: |
        import { ApolloClient, InMemoryCache, gql } from '@apollo/client';
        
        const client = new ApolloClient({
          uri: 'https://api.gethealthie.com/graphql',
          cache: new InMemoryCache(),
          headers: {
            'Authorization': 'Bearer YOUR_API_KEY'
          }
        });
        
        const CREATE_PATIENT = gql`
          mutation CreatePatient($input: signUpInput!) {
            signUp(input: $input) {
              user {
                id
                first_name
                last_name
                email
              }
              errors {
                field
                message
              }
            }
          }
        `;
        
        async function createPatient(patientData) {
          try {
            const { data } = await client.mutate({
              mutation: CREATE_PATIENT,
              variables: {
                input: {
                  first_name: patientData.first_name,
                  last_name: patientData.last_name,
                  email: patientData.email,
                  phone_number: patientData.phone_number,
                  role: "patient",
                  dietitian_id: patientData.dietitian_id
                }
              }
            });
            
            if (data.signUp.errors?.length > 0) {
              console.error('Validation errors:', data.signUp.errors);
              return null;
            }
            
            return data.signUp.user;
          } catch (error) {
            console.error('Error creating patient:', error);
            throw error;
          }
        }
    
    - operation: "Query Appointments"
      code: |
        const GET_APPOINTMENTS = gql`
          query GetAppointments($clientId: ID!, $first: Int) {
            client(id: $clientId) {
              id
              appointments(first: $first, status: "scheduled") {
                edges {
                  node {
                    id
                    date
                    time
                    end_time
                    attendees {
                      first_name
                      last_name
                    }
                  }
                }
              }
            }
          }
        `;
        
        async function getUpcomingAppointments(clientId) {
          const { data } = await client.query({
            query: GET_APPOINTMENTS,
            variables: { clientId, first: 10 }
          });
          
          return data.client.appointments.edges.map(edge => edge.node);
        }

python:
  name: "Python"
  description: "Python with requests library or gql client"
  dependencies:
    - "requests"
    - "gql[all]"
    
  examples:
    - operation: "Create Patient"
      code: |
        import requests
        import json
        
        HEALTHIE_API_URL = "https://api.gethealthie.com/graphql"
        API_KEY = "YOUR_API_KEY"
        
        def create_patient(patient_data):
            query = """
            mutation CreatePatient($input: signUpInput!) {
              signUp(input: $input) {
                user {
                  id
                  first_name
                  last_name
                  email
                }
                errors {
                  field
                  message
                }
              }
            }
            """
            
            variables = {
                "input": {
                    "first_name": patient_data["first_name"],
                    "last_name": patient_data["last_name"],
                    "email": patient_data["email"],
                    "phone_number": patient_data.get("phone_number"),
                    "role": "patient",
                    "dietitian_id": patient_data.get("dietitian_id")
                }
            }
            
            response = requests.post(
                HEALTHIE_API_URL,
                json={
                    "query": query,
                    "variables": variables
                },
                headers={
                    "Authorization": f"Bearer {API_KEY}",
                    "Content-Type": "application/json"
                }
            )
            
            result = response.json()
            
            if "errors" in result:
                raise Exception(f"GraphQL errors: {result['errors']}")
                
            return result["data"]["signUp"]["user"]
    
    - operation: "Using GQL Client"
      code: |
        from gql import gql, Client
        from gql.transport.aiohttp import AIOHTTPTransport
        
        # Set up the transport with auth
        transport = AIOHTTPTransport(
            url="https://api.gethealthie.com/graphql",
            headers={"Authorization": f"Bearer {API_KEY}"}
        )
        
        client = Client(transport=transport, fetch_schema_from_transport=True)
        
        # Define your query
        query = gql("""
            query GetClient($id: ID!) {
              client(id: $id) {
                id
                first_name
                last_name
                appointments(first: 5) {
                  edges {
                    node {
                      id
                      date
                      time
                    }
                  }
                }
              }
            }
        """)
        
        # Execute the query
        result = client.execute(query, variable_values={"id": "client-id"})

curl:
  name: "cURL"
  description: "Command line examples using cURL"
  
  examples:
    - operation: "Basic Query"
      code: |
        curl -X POST https://api.gethealthie.com/graphql \
          -H "Authorization: Bearer YOUR_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "query": "query { clients(first: 10) { edges { node { id first_name last_name } } } }"
          }'
    
    - operation: "Mutation with Variables"
      code: |
        curl -X POST https://api.gethealthie.com/graphql \
          -H "Authorization: Bearer YOUR_API_KEY" \
          -H "Content-Type: application/json" \
          -d '{
            "query": "mutation SignUp($input: signUpInput!) { signUp(input: $input) { user { id first_name last_name } errors { field message } } }",
            "variables": {
              "input": {
                "first_name": "John",
                "last_name": "Doe",
                "email": "john.doe@example.com",
                "phone_number": "+1234567890",
                "role": "patient"
              }
            }
          }'

# Common patterns across languages
common_patterns:
  authentication:
    description: "Always include authorization header"
    pattern: "Authorization: Bearer YOUR_API_KEY"
    
  error_handling:
    description: "Check for both transport and GraphQL errors"
    checks:
      - "HTTP status code (4xx, 5xx)"
      - "GraphQL errors array in response"
      - "Field-level errors in mutations"
      
  pagination:
    description: "Use cursor-based pagination for collections"
    pattern: |
      collections(first: 10, after: "cursor") {
        edges {
          node { ... }
          cursor
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }